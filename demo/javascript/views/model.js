// Generated by CoffeeScript 1.6.2
var SparseDemo, global,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (!global.SparseDemo) {
  SparseDemo = global.SparseDemo = {};
}

(function($) {
  'use strict';
  var _ref;

  return SparseDemo.ModelView = (function(_super) {
    var _ref1;

    __extends(ModelView, _super);

    function ModelView() {
      _ref = ModelView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ModelView.prototype.reset = function() {
      if (!this['form'].model.isNew()) {
        return this['form'].model.destroy();
      }
    };

    ModelView.prototype.subviews = {
      'form': SparseDemo.ModelForm = (function(_super1) {
        var SparseClass, _ref2;

        __extends(ModelForm, _super1);

        function ModelForm() {
          _ref1 = ModelForm.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        ModelForm.prototype.init = function(o) {
          this.events = _.extend(this.events, ModelForm.__super__.events);
          this.delegateEvents();
          return rivets.bind(this.el, {
            model: this.model
          });
        };

        ModelForm.prototype.model = new (SparseClass = (function(_super2) {
          __extends(SparseClass, _super2);

          function SparseClass() {
            _ref2 = SparseClass.__super__.constructor.apply(this, arguments);
            return _ref2;
          }

          SparseClass.prototype.defaults = {
            name: "New Record",
            description: "A Record Created by sParse"
          };

          return SparseClass;

        })(sparse.Model));

        ModelForm.prototype.events = {
          'click #create_model': function(evt) {
            var _this = this;

            return this.model.save({
              success: function(m, r, o) {
                return console.log("model sved");
              },
              error: function(m, r, o) {
                return console.log('failed to create model');
              }
            });
          },
          'click #update_model': function(evt) {
            var _this = this;

            return this.model.save({
              success: function(m, r, o) {},
              error: function(m, r, o) {
                return console.log('failed to update model');
              }
            });
          },
          'click #destroy_model': function(evt) {
            var _this = this;

            return this.model.destroy({
              success: function(m, r, o) {
                _this.__parent.__parent.collection.remove(_this.__parent.__parent.collection.filter(_this.__parent.__parent.collection.models, function(o) {
                  return o.path.match(new RegExp("/\/" + _this.model.objectId + "+$/"));
                }));
                return console.log("@__parent.__parent.collection len: " + _this.__parent.__parent.collection.length);
              },
              error: function(m, r, o) {
                return console.log('failed to destroy user');
              }
            });
          }
        };

        return ModelForm;

      })(SparseDemo.APIFormView)
    };

    return ModelView;

  })(SparseDemo.BaseView);
})(jQuery);
