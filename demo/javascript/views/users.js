// Generated by CoffeeScript 1.6.2
var SparseDemo, global,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

global = typeof exports !== "undefined" && exports !== null ? exports : window;

if (!global.SparseDemo) {
  SparseDemo = global.SparseDemo = {};
}

(function($) {
  'use strict';
  var _ref;

  return SparseDemo.UsersView = (function(_super) {
    var _ref1;

    __extends(UsersView, _super);

    function UsersView() {
      _ref = UsersView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UsersView.prototype.subviews = {
      'form': SparseDemo.UsersForm = (function(_super1) {
        __extends(UsersForm, _super1);

        function UsersForm() {
          _ref1 = UsersForm.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        UsersForm.prototype.model = new sparse.User({
          username: UsersForm.$el.find('user_name').val(),
          password: UsersForm.$el.find('user_password').val()
        });

        UsersForm.prototype.events = {
          'click #create_user': function(evt) {
            var _this = this;

            return this.model.save({
              success: function(m, r, o) {
                return console.log("Parse API response: " + (JSON.strongify(r)));
              },
              error: function(m, r, o) {
                return console.log('failed to create user');
              }
            });
          },
          'click #login_user': function(evt) {
            var _this = this;

            return this.model.login({
              success: function(m, r, o) {
                return console.log("Parse API response: " + (JSON.strongify(r)));
              },
              error: function(m, r, o) {
                return console.log('failed to login user');
              }
            });
          },
          'click #logout_user': function(evt) {
            var _this = this;

            return this.model.logout({
              success: function(m, r, o) {
                return console.log("Parse API response: " + (JSON.strongify(r)));
              },
              error: function(m, r, o) {
                return console.log('failed to logout user');
              }
            });
          },
          'click #destroy_user': function(evt) {
            var _this = this;

            return this.model.destroy({
              success: function(m, r, o) {
                return console.log("Parse API response: " + (JSON.strongify(r)));
              },
              error: function(m, r, o) {
                return console.log('failed to destroy user');
              }
            });
          }
        };

        return UsersForm;

      })(SparseDemo.BaseView)
    };

    return UsersView;

  }).call(this, SparseDemo.BaseView);
})(jQuery);
